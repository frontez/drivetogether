docker build -t frontez/userservice:latest .
docker push frontez/userservice:latest

docker build -t frontez/tripservice:latest .
docker push frontez/tripservice:latest

docker build -t frontez/notificationservice:latest .
docker push frontez/notificationservice:latest

docker build -t frontez/drivetogetherbotservice:latest .
docker push frontez/drivetogetherbotservice:latest


minikube start --vm-driver=docker
minikube addons enable ingress
minikube addons enable ingress-dns

kubectl create namespace keycloak
helm install keycloak oci://registry-1.docker.io/bitnamicharts/keycloak \
  --namespace keycloak \
  --set auth.adminUser=admin \
  --set auth.adminPassword=admin \
  --set persistence.enabled=true \
  --set postgresql.enabled=true \
  --set postgresql.persistence.enabled=true


#ручная установка keycloak - лучше не использовать
docker run -p 8080:8080 -e KC_BOOTSTRAP_ADMIN_USERNAME=admin -e KC_BOOTSTRAP_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:latest start-dev
kubectl apply -f keycloak-deployment.yaml
kubectl apply -f keycloak-service.yaml
#конец

kubectl apply -f userservice-deployment.yaml
kubectl apply -f userservice.yaml

kubectl apply -f drivetogetherbotservice-deployment.yaml
kubectl apply -f drivetogetherbotservice.yaml

#только для тестирования UserService отдельно
kubectl apply -f userservice-configmap.yaml
kubectl apply -f secret.yaml

kubectl create namespace ingress-nginx
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm install nginx ingress-nginx/ingress-nginx --namespace ingress-nginx -f nginx-ingress.yaml  

kubectl apply -f drivetogether-ingress.yaml

helm install user-db oci://registry-1.docker.io/bitnamicharts/postgresql -f values.yaml
helm install trip-db oci://registry-1.docker.io/bitnamicharts/postgresql -f trip-values.yaml

Дополнительно:
Нужно указать в system32/drivers/etc/hosts
127.0.0.1 arch.homework 
127.0.0.1 auth.arch.homework 


Билд и создание code-first для EntityFramework
dotnet build

kubectl apply -f userservice-configmap.yaml
kubectl apply -f tripservice-configmap.yaml

dotnet tool install --global dotnet-ef
dotnet ef migrations add InitialMigration
dotnet ef database update

kubectl rollout restart -n default deployment userservice
kubectl rollout restart -n default deployment drivetogetherbotservice
kubectl rollout restart -n default deployment tripservice
kubectl rollout restart -n default deployment notificationservice

------

kubectl create secret generic my-app-secrets \
  --from-literal=TelegramToken='API_KEY'

kubectl delete secret my-app-secrets 

kubectl port-forward --namespace default svc/user-db-postgresql 5432:5432
kubectl port-forward --namespace default svc/trip-db-postgresql 5433:5432


kubectl apply -f tripservice-deployment.yaml
kubectl apply -f tripservice.yaml


kubectl apply -f notificationservice-configmap.yaml
kubectl apply -f notificationservice-deployment.yaml
kubectl apply -f notificationservice.yaml


kubectl apply -f rabbitmq-deployment.yaml -f rabbitmq-service.yaml


helm install redis oci://registry-1.docker.io/bitnamicharts/redis \
  --version 18.4.0 \
  --set auth.password=your-strong-password-here \
  --set architecture=standalone \
  --set master.persistence.enabled=true \
  --set master.persistence.size=1Gi \
  --set service.type=ClusterIP \
  --set resources.requests.memory=256Mi \
  --set resources.requests.cpu=100m \
  --set resources.limits.memory=512Mi \
  --set resources.limits.cpu=500m



  kubectl port-forward --namespace default svc/redis-master 6379:6379 &
    REDISCLI_AUTH="your-strong-password-here" redis-cli -h 127.0.0.1 -p 6379



-------------
Prometheus

helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update

helm install prometheus prometheus-community/prometheus

kubectl get pods -l app.kubernetes.io/name=prometheus
kubectl get svc -l app.kubernetes.io/name=prometheus

export POD_NAME=$(kubectl get pods --namespace default -l "app=prometheus-pushgateway,component=pushgateway" -o jsonpath="{.items[0].metadata.name}")
  kubectl --namespace default port-forward $POD_NAME 9091

 kubectl port-forward -n default svc/prometheus-server 9090:80

kubectl apply -f prometheus-configmap.yaml
kubectl apply -f ServiceMonitor.yaml

-----------
Grafana

helm repo add grafana https://grafana.github.io/helm-charts
helm repo update

helm install grafana grafana/grafana

kubectl get pods -l app.kubernetes.io/name=grafana
kubectl get svc -l app.kubernetes.io/name=grafana

kubectl get secret --namespace default grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo

adminpw - xDXSvYinGL6IM3mxPAhgxJE7CJLZiSghYnMmu0aQ

kubectl port-forward svc/grafana -n default 3000:80
-------------
